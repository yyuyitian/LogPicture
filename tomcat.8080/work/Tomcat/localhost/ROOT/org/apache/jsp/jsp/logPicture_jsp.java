/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.39
 * Generated at: 2022-02-18 14:00:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class logPicture_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"zh-cn\">\r\n");
      out.write("    <title>ç¬¬ä¸ä¸ª ECharts å®ä¾</title>\r\n");
      out.write("    <!-- å¼å¥ echarts.js -->\r\n");
      out.write("    <script src=\"https://cdn.staticfile.org/echarts/4.3.0/echarts.min.js\"></script>\r\n");
      out.write("    <script src=\"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js\">\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <!-- ä¸ºEChartsåå¤ä¸ä¸ªå·å¤å¤§å°ï¼å®½é«ï¼çDom -->\r\n");
      out.write("    <div id=\"main\" style=\"width: 600px;height:400px;\"></div>\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("        // åºäºåå¤å¥½çdomï¼åå§åechartså®ä¾\r\n");
      out.write("        var myChart = echarts.init(document.getElementById('main'));\r\n");
      out.write("\r\n");
      out.write("        // æå®å¾è¡¨çéç½®é¡¹åæ°æ®\r\n");
      out.write("        var option = {\r\n");
      out.write("                title: {\r\n");
      out.write("                    text: 'é¡¹ç®å®æ½è¿åº¦è¡¨',\r\n");
      out.write("                    left: 10\r\n");
      out.write("                },\r\n");
      out.write("                legend: {\r\n");
      out.write("                    y: 'bottom',\r\n");
      out.write("                    data: ['è®¡åæ¶é´', 'å®éæ¶é´']  //ä¿®æ¹çå°æ¹1\r\n");
      out.write("\r\n");
      out.write("                },\r\n");
      out.write("                grid: {\r\n");
      out.write("                    containLabel: true,\r\n");
      out.write("                    left: 20\r\n");
      out.write("                },\r\n");
      out.write("                xAxis: {\r\n");
      out.write("                    type: 'time'\r\n");
      out.write("                },\r\n");
      out.write("\r\n");
      out.write("                yAxis: {\r\n");
      out.write("\r\n");
      out.write("                    data: ['ä»»å¡ä¸', 'ä»»å¡äº', 'ä»»å¡ä¸', 'ä»»å¡å', 'ä»»å¡äº', 'ä»»å¡å­', 'ä»»å¡ä¸']\r\n");
      out.write("\r\n");
      out.write("                },\r\n");
      out.write("                tooltip: {\r\n");
      out.write("                    trigger: 'axis',\r\n");
      out.write("                    formatter: function(params) {\r\n");
      out.write("                        var res = params[0].name + \"</br>\"\r\n");
      out.write("                        var date0 = params[0].data;\r\n");
      out.write("                        var date1 = params[1].data;\r\n");
      out.write("                        var date2 = params[2].data;\r\n");
      out.write("                        var date3 = params[3].data;\r\n");
      out.write("                        date0 = date0.getFullYear() + \"-\" + (date0.getMonth() + 1) + \"-\" + date0.getDate();\r\n");
      out.write("                        date1 = date1.getFullYear() + \"-\" + (date1.getMonth() + 1) + \"-\" + date1.getDate();\r\n");
      out.write("                        date2 = date2.getFullYear() + \"-\" + (date2.getMonth() + 1) + \"-\" + date2.getDate();\r\n");
      out.write("                        date3 = date3.getFullYear() + \"-\" + (date3.getMonth() + 1) + \"-\" + date3.getDate();\r\n");
      out.write("                        res += params[0].seriesName + \"~\" + params[1].seriesName + \":</br>\" + date0 + \"~\" + date1 + \"</br>\"\r\n");
      out.write("                        res += params[2].seriesName + \"~\" + params[3].seriesName + \":</br>\" + date2 + \"~\" + date3 + \"</br>\"\r\n");
      out.write("                        console.log(params[0]);\r\n");
      out.write("                        return res;\r\n");
      out.write("                    }\r\n");
      out.write("                },\r\n");
      out.write("                series: [\r\n");
      out.write("\r\n");
      out.write("                    {\r\n");
      out.write("                        name: 'è®¡åå¼å§æ¶é´',\r\n");
      out.write("                        type: 'bar',\r\n");
      out.write("                        stack: 'test1',\r\n");
      out.write("                        itemStyle: {\r\n");
      out.write("                            normal: {\r\n");
      out.write("                                color: 'rgba(0,0,0,0)'\r\n");
      out.write("                            }\r\n");
      out.write("                        },\r\n");
      out.write("                        data: [\r\n");
      out.write("                            new Date(\"2015/09/2\"),\r\n");
      out.write("                            new Date(\"2015/09/15\"),\r\n");
      out.write("                            new Date(\"2015/09/15\"),\r\n");
      out.write("                            new Date(\"2015/10/03\"),\r\n");
      out.write("                            new Date(\"2015/10/04\"),\r\n");
      out.write("                            new Date(\"2015/10/05\"),\r\n");
      out.write("                            new Date(\"2015/10/06\")\r\n");
      out.write("                        ]\r\n");
      out.write("                    },\r\n");
      out.write("                    {\r\n");
      out.write("                        name: 'è®¡åæ¶é´',\r\n");
      out.write("                        type: 'bar',\r\n");
      out.write("                        stack: 'test1',\r\n");
      out.write("                        //ä¿®æ¹å°æ¹2\r\n");
      out.write("                        itemStyle: {\r\n");
      out.write("                            normal: {\r\n");
      out.write("                                color: '#F98563'\r\n");
      out.write("                            }\r\n");
      out.write("                        },\r\n");
      out.write("                        data: [\r\n");
      out.write("                            new Date(\"2015/09/12\"),\r\n");
      out.write("                            new Date(\"2015/09/20\"),\r\n");
      out.write("                            new Date(\"2015/09/25\"),\r\n");
      out.write("                            new Date(\"2015/10/05\"),\r\n");
      out.write("                            new Date(\"2015/10/07\"),\r\n");
      out.write("                            new Date(\"2015/10/09\"),\r\n");
      out.write("                            new Date(\"2015/10/12\")\r\n");
      out.write("                        ]\r\n");
      out.write("                    },\r\n");
      out.write("                    {\r\n");
      out.write("                        name: 'å®éå¼å§æ¶é´',\r\n");
      out.write("                        type: 'bar',\r\n");
      out.write("                        stack: 'test2',\r\n");
      out.write("                        itemStyle: {\r\n");
      out.write("                            normal: {\r\n");
      out.write("                                color: 'rgba(0,0,0,0)'\r\n");
      out.write("                            }\r\n");
      out.write("                        },\r\n");
      out.write("                        data: [\r\n");
      out.write("                            new Date(\"2015/09/2\"),\r\n");
      out.write("                            new Date(\"2015/09/15\"),\r\n");
      out.write("                            new Date(\"2015/09/15\"),\r\n");
      out.write("                            new Date(\"2015/10/03\"),\r\n");
      out.write("                            new Date(\"2015/10/04\"),\r\n");
      out.write("                            new Date(\"2015/10/05\"),\r\n");
      out.write("                            new Date(\"2015/10/06\")\r\n");
      out.write("                        ]\r\n");
      out.write("                    },\r\n");
      out.write("                    {\r\n");
      out.write("                        name: 'å®éæ¶é´',\r\n");
      out.write("                        type: 'bar',\r\n");
      out.write("                        stack: 'test2',\r\n");
      out.write("                        //ä¿®æ¹å°æ¹3\r\n");
      out.write("                        itemStyle: {\r\n");
      out.write("                            normal: {\r\n");
      out.write("                                color: '#A2E068'\r\n");
      out.write("                            }\r\n");
      out.write("                        },\r\n");
      out.write("                        data: [\r\n");
      out.write("                            new Date(\"2015/09/6\"),\r\n");
      out.write("                            new Date(\"2015/09/20\"),\r\n");
      out.write("                            new Date(\"2015/09/27\"),\r\n");
      out.write("                            new Date(\"2015/10/11\"),\r\n");
      out.write("                            new Date(\"2015/10/16\"),\r\n");
      out.write("                            new Date(\"2015/10/18\"),\r\n");
      out.write("                            new Date(\"2015/10/17\")\r\n");
      out.write("                        ]\r\n");
      out.write("                    }\r\n");
      out.write("                ]\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        // ä½¿ç¨åæå®çéç½®é¡¹åæ°æ®æ¾ç¤ºå¾è¡¨ã\r\n");
      out.write("        myChart.setOption(option);\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
